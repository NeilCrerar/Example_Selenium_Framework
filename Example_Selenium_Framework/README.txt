------------------------------------------------------------------------------
    EXAMPLE SELENIUM FRAMEWORK
------------------------------------------------------------------------------

This is a Selenium test automation framework written with the Python 
programming language and utilising the Pytest test framework.  It demonstrates 
an implementation of the Page Object Model approach and was produced as an 
output from an online training course in Selenium with Python available on 
Udemy at:
  https://www.udemy.com/selenium-webdriver-with-python3/learn/v4/overview

THe framework currently utilises the 'practise' webpages provided by the course
instructor at: 
  https://letskodeit.teachable.com/

The current version of the framework is closely aligned with the course but has
been changed by myself to contain modified methods and structure.  It will 
continue to be updated and transition away from the training course version as 
it is improved and enhanced as my understanding of Selenium and Python 
continues.

There is an associated TODO file with the framework that lists all of the 
currently proposed modifications to be made to the framework

------------------------------------------------------------------------------
    SOFTWARE VERSIONS
------------------------------------------------------------------------------

The framework has been created using the following software versions and 
modules:
  - Python 3.6.0
  - Selenium 3.4.1
  - pytest
  - pytest-html
  - ddt


------------------------------------------------------------------------------
    FRAMEWORK STRUCTURE
------------------------------------------------------------------------------

The framework consists of the following structure:

Project
  |
  |--> base
  |    Contains all of the underpinning modules and methods used in the
  |    framework.  E.g. a factory class for creating a WebDriver instances, 
  |    custom WebDriver wrapper methods and common Page Model methods.
  |    NOTE: The base URL for the tests is defined here in the file: 
  |    'webdriverfactory.py'
  |                
  |--> configfiles
  |    Currently empty but will be used to hold any custom configuration 
  |    required as part of the framework.
  |
  |--> logs
  |    Currently empty.  Will hold logs generated by the framework, (set to 
  |    DEBUG level by default).  Currently defined by a relative filepath 
  |    (defined in 'utilities\custom_logger.py'). 
  |
  |--> pages
  |    Contains the Page Model files created for the framework.   
  |      |
  |      |--> sub-directory per test area
  |           Each 'area' of the website/app has it's own sub-directory, which 
  |           can then contain several 'page' files.
  |             |
  |             |--> page files
  |
  |--> screenshots
  |    Currently empty. Screenshots are automatically taken for any failed test
  |    (defined in 'utilities\test_results.py').
  |
  |--> tests
  |    Contains the test files to be executed against the website\app.  Main   
  |    'test' directory contains the pytest config file and the test suite 
  |    definition files.
  |      |
  |      |--> sub-directory per test area 
  |      |    Each 'area' of the website/app has it's own sub-directory, each  
  |      |    of which can then contain several 'page' files. 
  |      |      |
  |      |      |--> test files     
  |      |
  |      conftest.py
  |      test suite definition files
  |
  |--> utilities
  |    Contains all of the helper methods used in the framework as part of the 
  |    framework and test activities.   
  |
  README.txt
  TO_DO.txt

  
NOTE: Currently any test data files sit under the main project but this will be
changed in future updates.

------------------------------------------------------------------------------
    INSTRUCTIONS ON USE
------------------------------------------------------------------------------

Executing Tests
---------------
The framework implements the pytest test framework and requires that all
tests are executed via the command line.  The test suites are defined in the 
'tests' directory and it is intended that these are used for test execution by
default.

Use the following steps to execute a test suite:
  1. Open a command terminal
  2. Navigate to the 'tests' directory in the framework
  3. Execute the following command:
       $> py.test <test_suite_name> --browser <browser to be used>  

When the tests are executed, they require the browser to be used to be 
specified as an argument in the command line as:
  --browser <browser_name>

The browser names can be in any case and the following naming conventions are 
used for the framework:
  FireFox           :  --browser firefox
  Google Chrome     :  --browser chrome
  Internet Explorer :  --browser iexplorer

If no browser name is supplied or it is malformed/unrecognised, the framework
will default to using the Firefox browser to execute the tests.  

pytest also allows for the use of additional arguments if required.  These are 
inserted after the 'py.test' command and before the name of the test suite to 
executed.  For example:
  $> py.test -s -v <test_suite_name> --browser <browser to be used>
 
Common pytest argumet include:
  -s  display any print statements from the tests on the terminal   
  -v  verbose output from the tests for any issues during execution
  -x  stop execution after first failure
  --maxfail=n  stop execution after n number of failures

For full details on pytest and it's usage see:
  https://docs.pytest.org/en/latest/index.html


------------------------------------------------------------------------------
Default/Valid Users
-------------------
The tests within the framework currently utilise the 'practise' webpages 
provided as part of the course it was created from at: 
  https://letskodeit.teachable.com/

This includes the use of a default, shared user within the tests to login to 
the website.  As this is a shared user with other students on the course, the
details for the user can get changed which will affect the execution of the 
tests.

It is recommended that if you wish to see  the framework in action you create a 
user account of your own on the website and use those details when executing 
the tests.  The user logon details used in the tests can be changed by:
  1. Open the file: tests\conftest.py
  2. Go to the method: one_time_setup()
  3. Replace the existing credentials in "lp.login" with the new ones
  4. Open the file: tests\home\login_tests.py
  5. Update any test  that enters login details directly to use the new 
     credentials


------------------------------------------------------------------------------
Executing an Individual Test File
---------------------------------
It is designed to execute the tests
  included as a full test suite, however individual test files can be executed
  if required with a few modifications to the framework to account for changes 
  to the relative filepaths used for test data files and logging output.
  
  Update the logging directory:
  1. Open the file: utilities\custom_logger.py
  2. Find the variable for: log_location 
  3. Change the location of the log directory to reflect the filepath from that 
     file to the required log directory

  If the test you wish to run utilises a test data file:
  1. Open the testfile you wish to execute
  2. For each test method that imports data from a file
     a. Update the filepath for the data file you wish to use
  
  To execute an individual test file:
  1. Open a command terminal
  2. Navigate to the sub-directory containing the test file
  3. Execute the following command:
       $> py.test -s -v <test_file_name> --browser <browser_name> 
  

------------------------------------------------------------------------------
Change URL Used by the Framework
--------------------------------
The framework uses a base URL defined in the base file 'webdriverfactory.py'
All of the tests are written from the viewpoint of opening this base URL and
then navigating to the required area of the website/application to execute the
test(s).  To change the URL used by the framework:
  1. Open the file: base\webdriverfactory.py
  2. Go to the method: get_webdriver_instance(self)
  3. Change the value held in the variable: base_url


------------------------------------------------------------------------------
------------------------------------------------------------------------------
